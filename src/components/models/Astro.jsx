// "use client";
// import React, { use, useEffect, useRef } from "react";
// import { useGLTF, useAnimations } from "@react-three/drei";
// import { GLTF } from "three-stdlib";
// import { ThreeElements, useFrame } from "@react-three/fiber";
// import * as THREE from "three";

// type GLTFResult = GLTF & {
//   nodes: {
//     Object_2: THREE.Mesh;
//     Object_3: THREE.Mesh;
//     Object_4: THREE.Mesh;
//   };
//   materials: {
//     color_16448250: THREE.MeshStandardMaterial;
//     color_2829873: THREE.MeshStandardMaterial;
//     color_40919: THREE.MeshStandardMaterial;
//   };
// };

// export function AstroModel(props: ThreeElements["group"]) {
//   const group = useRef<THREE.Group>(null);
//   const { nodes, materials, animations, scene } = useGLTF(
//     "models/scene-transformed-astro.glb"
//   ) as GLTFResult;

//   const initialY = 10;
//   const floatAmplitude = 0.5;
//   const floatSpeed = 2;
//   const rotationSpeed = 0.3;

//   useFrame((state) => {
//     if (group.current) {
//       const time = state.clock.getElapsedTime();
//       group.current.position.y =
//         initialY + Math.sin(time * floatSpeed) * floatAmplitude;

//       group.current.rotation.y += rotationSpeed * 0.01;
//     }
//   });

//   return (
//     <group
//       {...props}
//       ref={group}
//       dispose={null}
//       position={[1, 0, 1]}
//       rotation={[0.3, 0, 0]}
//       scale={[0.4, 0.4, 0.4]}
//     >
//       <mesh
//         castShadow
//         geometry={nodes.Object_2.geometry}
//         material={materials.color_16448250}
//         position={[0, -67, 27]}
//         rotation={[-Math.PI, 0, 0]}
//       />
//       <mesh
//         castShadow
//         geometry={nodes.Object_3.geometry}
//         material={materials.color_2829873}
//         position={[0, -67, 27]}
//         rotation={[-Math.PI, 0, 0]}
//       />
//       <mesh
//         castShadow
//         geometry={nodes.Object_4.geometry}
//         material={materials.color_40919}
//         position={[0, -67, 27]}
//         rotation={[-Math.PI, 0, 0]}
//       />
//     </group>
//   );
// }

// useGLTF.preload("models/scene-transformed-astro.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 scene.gltf --transform 
Files: scene.gltf [156.43KB] > /Users/mv/Downloads/astro_bot/scene-transformed.glb [635.26KB] (-306%)
Author: hwahaha418 (https://sketchfab.com/hwahaha418)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/astro-bot-b2c6372a634f4bd2924364980383f8c0
Title: Astro bot
*/

import React, { act, useEffect } from "react";
import { useGraph, useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function AstroModel(props) {
  const group = React.useRef();
  const { scene, animations } = useGLTF("models/astro-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  const initialY = 0;
  const floatAmplitude = 0.5;
  const floatSpeed = 2;
  const rotationSpeed = 0.3;

  useFrame((state) => {
    if (group.current) {
      const time = state.clock.getElapsedTime();
      group.current.position.y =
        initialY + Math.sin(time * floatSpeed) * floatAmplitude;

      group.current.rotation.y += rotationSpeed * 0.01;
    }
  });

  useEffect(() => {
    const animation = actions["Armature|pose act"];
    
    animation.setEffectiveWeight(100);
    animation.setLoop(true);

    animation.play();
  }, []);
  return (
    <group ref={group} {...props} dispose={null} scale={[10, 10, 10]}>
      <group name="Sketchfab_Scene">
        <primitive object={nodes._rootJoint} />
        <mesh
          name="PS5_controler_C_white_0"
          geometry={nodes.PS5_controler_C_white_0.geometry}
          material={materials.C_white}
          position={[-0.064, -0.113, 0.274]}
          rotation={[0, 0, Math.PI / 9]}
          scale={1.5}
        />
        <mesh
          name="PS5_controler_C_blue_0"
          geometry={nodes.PS5_controler_C_blue_0.geometry}
          material={materials.C_blue}
          position={[-0.064, -0.113, 0.274]}
          rotation={[0, 0, Math.PI / 9]}
          scale={1.5}
        />
        <skinnedMesh
          name="Object_21"
          geometry={nodes.Object_21.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_21.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_23"
          geometry={nodes.Object_23.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_23.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_25"
          geometry={nodes.Object_25.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_25.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_27"
          geometry={nodes.Object_27.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_27.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_29"
          geometry={nodes.Object_29.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_29.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_31"
          geometry={nodes.Object_31.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_31.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_33"
          geometry={nodes.Object_33.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_33.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_35"
          geometry={nodes.Object_35.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_35.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_37"
          geometry={nodes.Object_37.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_37.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_39"
          geometry={nodes.Object_39.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_39.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_41"
          geometry={nodes.Object_41.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_41.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_43"
          geometry={nodes.Object_43.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_43.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <skinnedMesh
          name="Object_45"
          geometry={nodes.Object_45.geometry}
          material={materials.Astro}
          skeleton={nodes.Object_45.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/astro-transformed.glb");
