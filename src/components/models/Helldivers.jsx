// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.5.3 scene.gltf --transform 
// Files: scene.gltf [7.41KB] > /Users/mv/Downloads/helldivers_2_3d_models/scene-transformed.glb [86.85KB] (-1072%)
// Author: inonshalev42 (https://sketchfab.com/inonshalev42)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/helldivers-2-3d-models-6389f0a7e6044fdba58c970d65398b60
// Title: Helldivers 2 3D models
// */

// import React from "react";
// import { useGLTF } from "@react-three/drei";

// export function HelldiversModel(props) {
//   const { nodes, materials } = useGLTF("models/helldivers-transformed.glb");
//   return (
//     <group {...props} dispose={null} scale={3}>
//       <mesh geometry={nodes.Object_5.geometry} material={materials.object_0} />
//     </group>
//   );
// }

// useGLTF.preload("models/helldivers-transformed.glb");



/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 scene.gltf --transform 
Files: scene.gltf [23.62KB] > /Users/mv/Downloads/low_poly_helldiver/scene-transformed.glb [177.93KB] (-653%)
Author: MLGprogect (https://sketchfab.com/MLGprogect)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-helldiver-9b843f1e8e704151bef9b91d920385a8
Title: Low Poly Helldiver
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';

export function HelldiversModel(props) {
  const group = React.useRef();
  const { nodes, materials } = useGLTF('models/hd.glb')
  const initialY = -70;
  const floatAmplitude = 0.5;
  const floatSpeed = 2;
  const rotationSpeed = 0.3;
  useFrame((state) => {
    if (group.current) {
      const time = state.clock.getElapsedTime();
      group.current.position.y =
        initialY + Math.sin(time * floatSpeed) * floatAmplitude;

      group.current.rotation.y += rotationSpeed * 0.01;
    }
  });
  return (
    <group ref={group} {...props} dispose={null} position={[-5,-70,-200]}>
      <mesh geometry={nodes.Plane002_Material_0.geometry} material={materials.Material} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Helmet_0.geometry} material={materials.Helmet} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Body_0.geometry} material={materials.Body} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Armor_0.geometry} material={materials.Armor} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Cloth_0.geometry} material={materials.Cloth} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Rocks_0.geometry} material={materials.Rocks} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Flag_pole_0.geometry} material={materials.Flag_pole} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Material001_0.geometry} material={materials['Material.001']} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Red_Grass_0.geometry} material={materials.Red_Grass} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Plane002_Red_Grass2_0.geometry} material={materials.Red_Grass2} rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('models/hd.glb')
